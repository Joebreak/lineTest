

buildscript {    // Configuration for building
  repositories {
    jcenter()    // Bintray's repository - a fast Maven Central mirror & more
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'    // latest App Engine Gradle tasks
  }
}

repositories {   // repositories for Jar's you access in your code
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots' // SNAPSHOT repository (if needed)
  }
  mavenCentral()
  jcenter()
}

apply plugin: 'java'                              // standard Java tasks
apply plugin: 'war'                               // standard Web Archive plugin
apply plugin: 'com.google.cloud.tools.appengine'  // App Engine tasks


version = "1.5.9.RELEASE"       // Version in generated output

sourceCompatibility = 1.8     // App Engine Flexible uses Java 8
targetCompatibility = 1.8     // App Engine Flexible uses Java 8


dependencies {
  compile (
  'com.google.appengine:appengine-api-1.0-sdk:+', // Latest App Engine Api's
  'jstl:jstl:1.2',
  'org.springframework:spring-core:4.3.14.RELEASE',
  'org.springframework:spring-web:4.3.14.RELEASE',
  'org.springframework:spring-webmvc:4.3.14.RELEASE',
  'org.codehaus.jackson:jackson-mapper-asl:1.9.0'
  ) 
  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'


// Add your dependencies here.
//  compile 'com.google.cloud:google-cloud:+'   // Latest Cloud API's http://googlecloudplatform.github.io/google-cloud-java

  testCompile( 
   'junit:junit:4.12',
   'com.google.truth:truth:0.33',
   'org.mockito:mockito-all:1.10.19',

   'com.google.appengine:appengine-testing:+',
   'com.google.appengine:appengine-api-stubs:+',
   'com.google.appengine:appengine-tools-sdk:+'
  )
}

// Always run unit tests
appengineDeploy.dependsOn test
appengineStage.dependsOn test



test {
  useJUnit()
  testLogging.showStandardStreams = true
  beforeTest { descriptor ->
     logger.lifecycle("test: " + descriptor + "  Running")
  }

  onOutput { descriptor, event ->
     logger.lifecycle("test: " + descriptor + ": " + event.message )
  }
  afterTest { descriptor, result ->
    logger.lifecycle("test: " + descriptor + ": " + result )
  }
}

